"""Setup script for Cython compilation."""

from collections.abc import Sequence
from importlib.util import cache_from_source
from logging import getLogger
from os import getenv
from os.path import normcase
from pathlib import Path

from setuptools import setup
from setuptools.command.install import install as _install

########## Inputs ##########

USE_CYTHON = getenv("USE_CYTHON") == "1"
# Whether to use Cython to compile the Python code.
# This compiles Python into C extension modules to protect the source code.

SRC_PREFIX = "src/"

# The glob pattern of the source files you want to protect
# We protect the main business logic files but keep __init__.py accessible
INCLUDE_FILE_PATTERNS = (
    "cythonize_package/app.py",
    "cythonize_package/models.py",
    "cythonize_package/service.py",
)

# Usually we don't need to protect the `**/__init__.py` files
EXCLUDE_FILE_PATTERNS = (
    "cythonize_package/**/__init__.py",
    "cythonize_package/**/__main__.py",
)

##############################

_logger = getLogger(__name__)


class install(_install):
    """Subclass `setuptools.command.install` to exclude protected files in the Wheel.

    ref: <https://setuptools.pypa.io/en/latest/userguide/extension.html>
    """

    def run(self) -> None:
        """Remove protected files after installation and before writing into the Wheel,
        to prevent them from being packaged into the Wheel."""

        super().run()  # pyright: ignore[reportUnknownMemberType]

        # skip if `pip install -e`
        build_py_obj = self.distribution.get_command_obj("build_py")
        build_py_obj.ensure_finalized()
        if build_py_obj.editable_mode:
            return

        # ref: <https://github.com/pypa/setuptools/blob/6ead555c5fb29bc57fe6105b1bffc163f56fd558/setuptools/_distutils/command/install_lib.py#L115-L124>
        # Python 3 only
        # ref: <https://github.com/pypa/setuptools/blob/6ead555c5fb29bc57fe6105b1bffc163f56fd558/setuptools/_distutils/command/install_lib.py#L111>
        if self.install_lib is None:
            msg = "install_lib is not set"
            raise ValueError(msg)
        install_lib = Path(self.install_lib)

        def norm_files_set(patterns: Sequence[str]) -> set[str]:
            """Normalized set of file paths"""
            files_set: set[str] = set()
            for pattern in patterns:
                for file in install_lib.glob(pattern):
                    files_set.add(normcase(str(file.resolve())))
            return files_set

        include_files_set = norm_files_set(INCLUDE_FILE_PATTERNS)
        exclude_files_set = norm_files_set(EXCLUDE_FILE_PATTERNS)

        for file in include_files_set.difference(exclude_files_set):
            protected_file = Path(file)
            _logger.info("Removing protected file: %s", protected_file)

            # remove the protected files from the Wheel
            protected_file.unlink()
            # remove C files generated by Cython
            protected_file.with_suffix(".c").unlink(missing_ok=True)
            # why `.cpp`: see Cython docs on C++ language wrapping
            protected_file.with_suffix(".cpp").unlink(missing_ok=True)
            # remove *potential* python bytecode files
            # (e.g., `pip install --compile-bytecode`)
            # ref:
            #   - <https://docs.python.org/3/using/cmdline.html#cmdoption-O>
            #   - <https://peps.python.org/pep-0488/>
            #   - <https://docs.python.org/3/library/importlib.html#importlib.util.cache_from_source>
            for optimization in ("", 1, 2):
                bytecode_file = cache_from_source(
                    str(protected_file), optimization=optimization
                )
                Path(bytecode_file).unlink(missing_ok=True)


if USE_CYTHON:
    from Cython.Build import cythonize  # pyright: ignore[reportMissingTypeStubs]

    ext_modules = cythonize(  # pyright: ignore[reportUnknownArgumentType]
        module_list=[SRC_PREFIX + pattern for pattern in INCLUDE_FILE_PATTERNS],
        exclude=[SRC_PREFIX + pattern for pattern in EXCLUDE_FILE_PATTERNS],
        compiler_directives={
            "language_level": "3",
            "embedsignature": True,
        },
    )
    cmdclass = {"install": install}
else:
    ext_modules = []
    cmdclass = {}


setup(
    cmdclass=cmdclass,
    ext_modules=ext_modules,
)

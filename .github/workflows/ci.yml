name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags-ignore:
      - "v*"
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --all-extras

      - name: Run Ruff linter
        run: uv run ruff check --output-format=github .

      - name: Run Ruff formatter check
        run: uv run ruff format --check .

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run Bandit security scan
        run: uv run bandit -r src/ -c pyproject.toml -f json -o bandit-report.json || true

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: bandit-report.json

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run mypy type checker
        run: uv run mypy src/ --strict --ignore-missing-imports

  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run tests
        run: uv run pytest test_api.py -v --tb=short

      - name: Test import (dev build)
        run: |
          uv build
          uv pip install dist/*.whl --force-reinstall
          python -c "from cythonize_package import app; print('✅ Dev build import successful')"

  build-dev:
    name: Build (Development)
    runs-on: ubuntu-latest
    needs: [lint, security, type-check, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Build package (dev)
        run: ./build.sh

      - name: Upload dev artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dev-package
          path: dist/*

  build-prod:
    name: Build (Production - Cythonized)
    runs-on: ${{ matrix.os }}
    needs: [lint, security, type-check, test]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install build dependencies
        run: uv sync --all-extras

      - name: Build package (production/Cython)
        run: ./build.sh cython

      - name: Verify build
        run: ./verify.sh

      - name: Upload production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: prod-package-${{ matrix.os }}
          path: dist/*

  docker-test:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: cythonize-package:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -d -p 8000:8000 --name test-container cythonize-package:test
          sleep 5
          curl -f http://localhost:8000/ || exit 1
          docker stop test-container
          echo "✅ Docker image test passed"

  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [lint, security, type-check, test, build-dev, build-prod, docker-test]
    if: always()
    steps:
      - name: Check if all jobs passed
        run: |
          if [[ "${{ needs.lint.result }}" == "success" ]] && \
             [[ "${{ needs.security.result }}" == "success" ]] && \
             [[ "${{ needs.type-check.result }}" == "success" ]] && \
             [[ "${{ needs.test.result }}" == "success" ]] && \
             [[ "${{ needs.build-dev.result }}" == "success" ]] && \
             [[ "${{ needs.build-prod.result }}" == "success" ]] && \
             [[ "${{ needs.docker-test.result }}" == "success" ]]; then
            echo "✅ All checks passed!"
            exit 0
          else
            echo "❌ Some checks failed"
            exit 1
          fi

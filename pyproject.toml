[project]
name = "cythonize-package"
version = "0.1.0"
description = "A FastAPI service with Cython-protected source code"
readme = "README.md"
authors = [
    { name = "Shubham Maurya", email = "shubham.maurya@invenics.com" }
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.115.0",
    "pydantic>=2.9.0",
    "pydantic[email]>=2.9.0",
    "uvicorn[standard]>=0.32.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "httpx>=0.27.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "bandit[toml]>=1.7.0",
    "pre-commit>=4.0.0",
]

[build-system]
requires = [
    "setuptools>=75.0.0",
    "Cython>=3.0.0,<4.0.0",
]
build-backend = "setuptools.build_meta"

[dependency-groups]
dev = [
    "pytest>=8.0.0",
    "httpx>=0.27.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "bandit[toml]>=1.7.0",
    "pre-commit>=4.0.0",
]

[tool.setuptools]
# Tell setuptools where to find packages
packages = {find = {where = ["src"]}}

[tool.setuptools.package-data]
cythonize_package = ["py.typed"]

# ============================================================================
# Ruff Configuration (Linting & Formatting)
# ============================================================================
[tool.ruff]
target-version = "py311"
line-length = 88
indent-width = 4

# Exclude directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*.pyi",
]

[tool.ruff.lint]
# Enable strict linting rules
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "ANN",    # flake8-annotations
    "ASYNC",  # flake8-async
    "S",      # flake8-bandit
    "BLE",    # flake8-blind-except
    "FBT",    # flake8-boolean-trap
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "DJ",     # flake8-django
    "EM",     # flake8-errmsg
    "EXE",    # flake8-executable
    "FA",     # flake8-future-annotations
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "G",      # flake8-logging-format
    "INP",    # flake8-no-pep420
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "INT",    # flake8-gettext
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "TD",     # flake8-todos
    "FIX",    # flake8-fixme
    "ERA",    # eradicate
    "PD",     # pandas-vet
    "PGH",    # pygrep-hooks
    "PL",     # Pylint
    "TRY",    # tryceratops
    "FLY",    # flynt
    "NPY",    # NumPy-specific rules
    "AIR",    # Airflow
    "PERF",   # Perflint
    "FURB",   # refurb
    "LOG",    # flake8-logging
    "RUF",    # Ruff-specific rules
]

# Ignore specific rules
ignore = [
    "ANN101",  # Missing type annotation for self in method
    "ANN102",  # Missing type annotation for cls in classmethod
    "D100",    # Missing docstring in public module
    "D104",    # Missing docstring in public package
    "COM812",  # Trailing comma missing (conflicts with formatter)
    "ISC001",  # Implicitly concatenated string literals (conflicts with formatter)
    "TD002",   # Missing author in TODO
    "TD003",   # Missing issue link in TODO
    "FIX002",  # Line contains TODO
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Indent with spaces
indent-style = "space"

# Use `\n` line endings for all files
line-ending = "lf"

# Enable auto-formatting of code examples in docstrings
docstring-code-format = true

# Set the line length limit used when formatting code snippets in docstrings
docstring-code-line-length = 72

[tool.ruff.lint.per-file-ignores]
"test_*.py" = [
    "S101",    # Allow assert in tests
    "ANN",     # Don't require annotations in tests
    "PLR2004", # Allow magic values in tests
]
"setup.py" = [
    "N801",    # Allow lowercase class names in setup.py
    "ANN",     # Don't require annotations in setup.py
]
"__init__.py" = [
    "F401",    # Allow unused imports in __init__.py
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["cythonize_package"]
force-single-line = false
lines-after-imports = 2

# ============================================================================
# Mypy Configuration (Type Checking)
# ============================================================================
[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true

[[tool.mypy.overrides]]
module = "setuptools.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "Cython.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "setup"
disable_error_code = ["arg-type", "no-untyped-def"]

# ============================================================================
# Bandit Configuration (Security)
# ============================================================================
[tool.bandit]
targets = ["src"]
exclude_dirs = [
    "tests",
    "test",
    ".venv",
    "venv",
]
skips = [
    "B101",  # assert_used - we use asserts in type checking
]

# ============================================================================
# Pytest Configuration (Testing)
# ============================================================================
[tool.pytest.ini_options]
testpaths = ["."]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--disable-warnings",
]

# ============================================================================
# Coverage Configuration
# ============================================================================
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
